import sage.all
from sage.rings.integer_ring import Z as ZZ
from curve import *
from pb import *

####################
def random_pythagorean_circuit():
    m = randint(1,1000)
    n = randint(1,1000)
    if n>=m:
        m,n=n,m
    a,b,c = m**2-n**2, 2*m*n,m**2+n**2
    assert a**2+b**2 == c**2
    return [[a,    b,    c,    a**2], \
            [a,    b,    c,    b**2], \
            [a**2, b**2, c**2, c**2]]
####################
# setup for pythagorean circuit verification
# This is an integer circuit so it can be used as a Fp-arithmetic for
# all p.
L = [0,0,0,1]
R = [0,0,0,1]
O = [-1,-1,-1,-1]
M = [1,1,1,0]
C = [0,0,0,0]
# The needed copy constraints:
def pythagorean_circuit_copy_constraints(srs):
    k1 = srs.k1
    k2 = srs.k2
    H = srs.H
    s1 = [k1*H[0],k1*H[1],k1*H[2],k2*H[0]]
    s2 = [H[0]   ,H[1]   ,H[2]   ,k2*H[1]]
    s3 = [H[3]   ,k1*H[3],k2*H[3],k2*H[2]]
    return [s1,s2,s3]
###################

###################
# useful below...
def random_circuit(F, n) :
    # create a random F-circuit of size n
    L, R, O, M, C, a, b, c = [], [], [], [], [], [], [], []
    for i in range(n) :
        L.append(F.random_element())
        R.append(F.random_element())
        O.append(F.random_element())
        M.append(F.random_element())
        a.append(F.random_element())
        b.append(F.random_element())
        c.append(F.random_element())
        C.append(-(L[i] * a[i] + R[i] * b[i] + O[i] * c[i] + M[i] *
                   a[i] * b[i]))
    return [[L, R, O, M, C], [a, b, c]]
###################

CYY = ZZ['YY']
YY = CYY.gen()

print('BLS12-381')
b = 4
alpha = -1
beta = [264,724]                                                    
pol = YY**12 +\
    4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559259*YY**6+\
    593872
z = -(1<<16) - (1<<48) - (1<<57) - (1<<60) - (1<<62) - (1<<63)            
BLS12381 = BLS12(z, pol, b, alpha, beta)

k = 3
n = 1<<k
print('Trusted setup')
t = cputime()
srs = TrustedSetup(BLS12381, k)
print('total time:', round(cputime(t), 2), "s")
s = pythagorean_circuit_copy_constraints(srs)
[a,b,c] = random_pythagorean_circuit()
circuit = Circuit(srs, L, R, O, M, C, s[0], s[1], s[2], a, b, c)
pb_pi = PbProof(srs)
print('Proof')
t = cputime()
pb_pi.create(a,b,c,circuit)
print('total time:', round(cputime(t), 2), "s")
print('Verification')
t = cputime()
assert pb_pi.verify(circuit)
print('total time:', round(cputime(t), 2), "s\n")
##########


####################
print('BN446')
b = 57
alpha = -5
beta = [15250889777027750297236910537782303148893367817253085060031184897101857504303805178557602729942681483147710276347781744734805602133137,5773691317273618063062763948791802963667967404938274549792897209825486398841176625021838959863591596038764034024141126973413173230013]
pol = YY**12 + \
    71709916050014581518097244432190490456789184575117352119327865061286964825668504893600812858233193261614018643779249601417281983100639*YY**6+ \
    24171740089485729081949134077261661673985741666425323249787792000765285304978495483042934271153343700385788560602742934427904148889120
z = -0x4000000000001000008780000000
BN446 = BN(z,pol, b, alpha, beta)

k = 3
n = 1<<k
print('Trusted setup')
t = cputime()
srs = TrustedSetup(BN446, k)
print('total time:', round(cputime(t), 2), "s")
s = pythagorean_circuit_copy_constraints(srs)
[a,b,c] = random_pythagorean_circuit()
circuit = Circuit(srs, L, R, O, M, C, s[0], s[1], s[2], a, b, c)
pb_pi = PbProof(srs)
print('Proof')
t = cputime()
pb_pi.create(a,b,c,circuit)
print('total time:', round(cputime(t), 2), "s")
print('Verification')
t = cputime()
assert pb_pi.verify(circuit)
print('total time:', round(cputime(t), 2), "s\n")
##########


####################
print('MNT4-753')
z = -0x15474b1d641a3fd86dcbcee5dcda7fe51852c8cbe26e600733b714aa43c31a66b0344c4e2c428b07a7713041ba18000
polFp4 = YY**4 + \
    37379361200511553367639456269567546579059057935877611030867528015684736504829404140577066118228218594710869373596942812092798936272014313390855103162399791769016029517375750317162915773767964791930057652294893260595692725142158*YY**2+\
    31954271437892822958644925583684026159433805293817658857702372279240161299813904134012230354221595661925223241752961461442526200117024399095947979617544389733471704136682918552470747188371833487783235193225392792663189748703042

a = 2
b = 0x01373684A8C9DCAE7A016AC5D7748D3313CD8E39051C596560835DF0C9E50A5B59B882A92C78DC537E51A16703EC9855C77FC3D8BB21C8D68BB8CFB9DB4B8C8FBA773111C36C8B1B4E8F1ECE940EF9EAAD265458E06372009C9A0491678EF4
alpha = 4158625621124756913473556937371908750669906260785413721023516688442457210142141313271720764247316811755118073630381252011879379110102444432695505369204929156849227769754221066501234768257141766151800464682534553684102976651152
beta = \
    [23208810367663176718524486656456863838641180952015143556349738913182984560156404702770360704676229624062636285089782380067954258393577228506164054140813230584423389589261965384426528440859480457755599225544694635005268359118522,
 38206470749756366809896751948676645388926293491944993690725378080639481936607787961505206334844938217988621102973984139113406468646277445516317121929040343585829034347309530034082119984674122617692103895195583986506473916422837]
MNT4753 = MNT4(z, polFp4, a, b, alpha, beta)

k = 3
n = 1<<k
print('Trusted setup')
t = cputime()
srs = TrustedSetup(MNT4753, k)
print('total time:', round(cputime(t), 2), "s")
s = pythagorean_circuit_copy_constraints(srs)
[a,b,c] = random_pythagorean_circuit()
circuit = Circuit(srs, L, R, O, M, C, s[0], s[1], s[2], a, b, c)
pb_pi = PbProof(srs)
print('Proof')
t = cputime()
pb_pi.create(a,b,c,circuit)
print('total time:', round(cputime(t), 2), "s")
print('Verification')
t = cputime()
assert pb_pi.verify(circuit)
print('total time:', round(cputime(t), 2), "s\n")
##########


####################
print('MNT6-753')
z = 0xaa3a58eb20d1fec36e5e772ee6d3ff28c296465f137300399db8a5521e18d33581a262716214583d3b89820dd0c000
polFp6 =  YY**6 + 25216255138081661019427891694405416633858726130082950449745755793457996404182767449843058103493359915659321813354977857813198428740541532205848047016763685785906060037733583275951070749609982904583045695796496932953801318920573*YY**4 + 14379798481288971001388484603011816650834566719577288994631356042702170218254545746426793442887355428304226342632051981426009354779341543592087109925119970470933507680518101842074126180929517277164685385770092610103507219299356*YY**2 + 25047295647713624582151474704972835260747989650267664320523650263238326388802643509788116084760499896282702389801100295845779020591905107295594272846303372309091883126238980735292028004163047017173045062259272088078908574046560
a = 11
b = 0x7DA285E70863C79D56446237CE2E1468D14AE9BB64B2BB01B10E60A5D5DFE0A25714B7985993F62F03B22A9A3C737A1A1E0FCF2C43D7BF847957C34CCA1E3585F9A80A95F401867C4E80F4747FDE5ABA7505BA6FCF2485540B13DFC8468A
alpha = 36735184133047490208242688767362051828069614111742429899430736257047361890220772925747823800038136706115556712769278059483707298644218636666112743352876829486870975797456647972817163542629980717338314917305540721320155492005799
beta = \
    [19526908932585415261753512629358619207494231236608315897940416682864236406986482032091576474695772642392273376807313032277715895414215392644514812230943035515178924204322181868996588508694271344880275247441106465162589211133143,40293753517757290901805623452490493619249499108285661139858119141875225522204355929397863537942646337682476877322845594980428354407893351443111502809163107462086585668627450363828041215865949100441070415997324855350451746969705,31096648359401488251559195511032168791004896318650956239915714321535076781512989449682404895396038741659931935435610314990176183635042321861879385247715893602911473465928994067598506329344805929060111161984409136372705523177578]
MNT6753 = MNT6(z, polFp6, a, b, alpha, beta)
k = 3
n = 1<<k

print('Trusted setup')
t = cputime()
srs = TrustedSetup(MNT6753, k)
print('total time:', round(cputime(t), 2), "s")
s = pythagorean_circuit_copy_constraints(srs)
[a,b,c] = random_pythagorean_circuit()
circuit = Circuit(srs, L, R, O, M, C, s[0], s[1], s[2], a, b, c)
pb_pi = PbProof(srs)
print('Proof')
t = cputime()
pb_pi.create(a,b,c,circuit)
print('total time:', round(cputime(t), 2), "s")
print('Verification')
t = cputime()
assert pb_pi.verify(circuit)
print('total time:', round(cputime(t), 2), "s\n")
##########
